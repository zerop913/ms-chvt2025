Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код);
            Категория.Вставить("name", Выборка.Наименование);
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределеннуюКатегорию(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &Ссылка";
        
        ЗапросКатегории.УстановитьПараметр("Ссылка", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Категория не найдена");
            Возврат Ответ;
        КонецЕсли;
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &Категория
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТоваров.УстановитьПараметр("Категория", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределенныйТовар(Запрос) Экспорт
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыЗапроса.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор товара");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора товара");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &Ссылка
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТовара.УстановитьПараметр("Ссылка", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Товар не найден");
            Возврат Ответ;
        КонецЕсли;
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Выборка.Артикул);
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции