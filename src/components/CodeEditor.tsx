"use client";

import { useState, useEffect, useCallback } from "react";
import { MasterClassStep } from "@/types/masterclass";

interface CodeEditorProps {
  step: MasterClassStep;
  stepIndex: number;
  onComplete: (score: number) => void;
}

// Храним исходные функции из module.bsl с пропусками для заполнения
const codeTemplates = [
  // Шаг 1: ПолучитьКатегории
  `Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(___); // TODO: Какой код статуса для успеха?
        Ответ.Заголовки.Вставить("___", "___"); // TODO: Заголовок для JSON
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   ___ // TODO: Условие для исключения групп
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            // TODO: Добавьте поля code и name
            ___
            ___
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(___); // TODO: Код для внутренней ошибки
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  // Шаг 2: ПолучитьОпределеннуюКатегорию
  `Функция ПолучитьОпределеннуюКатегорию(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.___; // TODO: Как получить параметры URL?
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = ___ Тогда // TODO: Проверка на существование
            Ответ = Новый HTTPСервисОтвет(___); // TODO: Код для неверного запроса
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &Ссылка";
        
        ___; // TODO: Как передать параметр в запрос?
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если ___ Тогда // TODO: Проверка что категория найдена
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Категория не найдена");
            Возврат Ответ;
        КонецЕсли;
        
        // TODO: Создайте структуру категории и заполните JSON
        ___
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  // Остальные шаги будут добавлены аналогично...
  `// Шаг 3: ПолучитьТоварыКатегории
Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        // TODO: Добавьте проверки параметра из предыдущего шага
        ___
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   ___ // TODO: Добавьте остальные поля товара
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &Категория
            |   ___"; // TODO: Добавьте условия фильтрации
            
        ЗапросТоваров.УстановитьПараметр("Категория", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            // TODO: Заполните все поля товара
            ___
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        // TODO: Преобразование в JSON и возврат
        ___
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  `// Шаг 4: ПолучитьВсеТовары с категориями
Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   ___ // TODO: Поля связанной категории с псевдонимами
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            // TODO: Основные поля товара
            ___
            
            // TODO: Создайте вложенную структуру категории
            ___
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  `// Шаг 5: ПолучитьОпределенныйТовар
Функция ПолучитьОпределенныйТовар(Запрос) Экспорт
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыЗапроса.Получить("___"); // TODO: Параметр товара
        
        // TODO: Проверки параметра и формата GUID
        ___
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   ___ // TODO: Все поля товара и категории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &Ссылка
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТовара.УстановитьПараметр("Ссылка", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(___); // TODO: Код для "не найдено"
            Ответ.УстановитьТелоИзСтроки("Товар не найден");
            Возврат Ответ;
        КонецЕсли;
        
        // TODO: Структура товара с категорией
        ___
        
        // TODO: JSON и возврат
        ___
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  `// ПОЛНЫЙ КОД API ДЛЯ КАТАЛОГА ТОВАРОВ
// =====================================
// Готовое решение - полноценный модуль для работы с каталогом

Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код);
            Категория.Вставить("name", Выборка.Наименование);
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределеннуюКатегорию(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &Ссылка";
        
        ЗапросКатегории.УстановитьПараметр("Ссылка", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Категория не найдена");
            Возврат Ответ;
        КонецЕсли;
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &Категория
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТоваров.УстановитьПараметр("Категория", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределенныйТовар(Запрос) Экспорт
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыЗапроса.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор товара");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора товара");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &Ссылка
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТовара.УстановитьПараметр("Ссылка", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Товар не найден");
            Возврат Ответ;
        КонецЕсли;
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Выборка.Артикул);
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,
];

export function CodeEditor({ step, stepIndex, onComplete }: CodeEditorProps) {
  const [code, setCode] = useState(codeTemplates[stepIndex] || "");
  const [isCompleted, setIsCompleted] = useState(false);
  const [completionPercentage, setCompletionPercentage] = useState(0);

  const calculateCompletion = useCallback(
    (currentCode: string) => {
      // Для 6-го шага всегда показываем как завершенное (готовое решение)
      if (stepIndex === 5) {
        // stepIndex начинается с 0, поэтому 6-й шаг = индекс 5
        setCompletionPercentage(100);
        setIsCompleted(true);
        onComplete(100);
        return;
      }

      const todoCount = (currentCode.match(/TODO:/g) || []).length;
      const blankCount = (currentCode.match(/___/g) || []).length;
      const totalGaps = todoCount + blankCount;

      if (totalGaps === 0) {
        setCompletionPercentage(100);
        setIsCompleted(true);
        onComplete(100);
        return;
      }

      const currentTodoCount = (code.match(/TODO:/g) || []).length;
      const currentBlankCount = (code.match(/___/g) || []).length;
      const currentGaps = currentTodoCount + currentBlankCount;

      const percentage = Math.max(
        0,
        ((totalGaps - currentGaps) / totalGaps) * 100
      );
      setCompletionPercentage(percentage);

      if (percentage >= 80) {
        setIsCompleted(true);
        onComplete(percentage);
      }
    },
    [stepIndex, onComplete, code]
  );

  useEffect(() => {
    setCode(codeTemplates[stepIndex] || "");
    setIsCompleted(false);
    calculateCompletion(codeTemplates[stepIndex] || "");
  }, [stepIndex, calculateCompletion]);

  const handleCodeChange = (value: string) => {
    setCode(value);
    calculateCompletion(value);
  };

  const resetCode = () => {
    setCode(codeTemplates[stepIndex] || "");
    setIsCompleted(false);
    setCompletionPercentage(0);
  };

  const showSolution = () => {
    // Показать решение (это будет реальная функция из module.bsl)
    const solutions = [
      // Шаг 1: ПолучитьКатегории
      `Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код);
            Категория.Вставить("name", Выборка.Наименование);
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

      // Шаг 2: ПолучитьОпределеннуюКатегорию
      `Функция ПолучитьОпределеннуюКатегорию(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &Ссылка";
        
        ЗапросКатегории.УстановитьПараметр("Ссылка", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Категория не найдена");
            Возврат Ответ;
        КонецЕсли;
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

      // Шаг 3: ПолучитьТоварыКатегории
      `Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &Категория
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТоваров.УстановитьПараметр("Категория", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

      // Шаг 4: ПолучитьВсеТовары
      `Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

      // Шаг 5: ПолучитьОпределенныйТовар
      `Функция ПолучитьОпределенныйТовар(Запрос) Экспорт
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыЗапроса.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор товара");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора товара");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &Ссылка
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТовара.УстановитьПараметр("Ссылка", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Товар не найден");
            Возврат Ответ;
        КонецЕсли;
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Выборка.Артикул);
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

      // Шаг 6: Полный код всех функций
      `// ПОЛНЫЙ КОД API ДЛЯ КАТАЛОГА ТОВАРОВ
// =====================================

Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код);
            Категория.Вставить("name", Выборка.Наименование);
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределеннуюКатегорию(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &Ссылка";
        
        ЗапросКатегории.УстановитьПараметр("Ссылка", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Категория не найдена");
            Возврат Ответ;
        КонецЕсли;
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &Категория
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТоваров.УстановитьПараметр("Категория", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределенныйТовар(Запрос) Экспорт
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыЗапроса.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор товара");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора товара");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &Ссылка
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТовара.УстановитьПараметр("Ссылка", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Товар не найден");
            Возврат Ответ;
        КонецЕсли;
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Выборка.Артикул);
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,
    ];

    if (solutions[stepIndex]) {
      setCode(solutions[stepIndex]);
      setCompletionPercentage(100);
      setIsCompleted(true);
      onComplete(100);
    }
  };

  return (
    <div className="relative">
      {/* Step Info */}
      <div className="relative mb-6">
        <div className="absolute inset-0 bg-chvt-black-900/40 backdrop-blur-sm rounded-xl border border-chvt-orange-500/20"></div>
        <div className="relative p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-2xl font-bold text-white">
              <span className="text-chvt-orange-500">Шаг {step.id}:</span>{" "}
              {step.title}
            </h2>
            <div className="flex items-center space-x-4">
              <div className="bg-chvt-black-900 px-4 py-2 rounded border border-chvt-orange-500/20">
                <span className="text-chvt-orange-500 font-bold">
                  {Math.round(completionPercentage)}%
                </span>
                <span className="text-gray-400 ml-2">завершено</span>
              </div>
              {isCompleted && (
                <div className="bg-green-600 px-4 py-2 rounded text-white font-bold">
                  ✓ ГОТОВО
                </div>
              )}
            </div>
          </div>

          <p className="text-gray-300 mb-4">{step.description}</p>

          {/* Progress Bar */}
          <div className="bg-chvt-black-900/50 rounded-full h-2 border border-chvt-orange-500/20">
            <div
              className="bg-chvt-gradient h-2 rounded-full transition-all duration-500 relative overflow-hidden"
              style={{ width: `${completionPercentage}%` }}
            >
              <div className="absolute inset-0 bg-white/20 animate-pulse"></div>
            </div>
          </div>
        </div>
      </div>

      {/* Theory */}
      <div className="relative mb-6">
        <div className="absolute inset-0 bg-chvt-black-900/30 backdrop-blur-sm rounded-xl border border-chvt-orange-500/20"></div>
        <div className="relative p-6">
          <h3 className="text-lg font-bold text-white mb-4 flex items-center">
            <span className="text-chvt-orange-500 mr-2">📚</span>
            Теория
          </h3>
          <ul className="space-y-2">
            {step.theory.map((item, index) => (
              <li key={index} className="flex items-start text-gray-300">
                <span className="text-chvt-orange-500 mr-2 font-bold">•</span>
                {item}
              </li>
            ))}
          </ul>
        </div>
      </div>

      {/* Code Editor */}
      <div className="relative mb-6">
        <div className="absolute inset-0 bg-chvt-black-900/40 backdrop-blur-sm rounded-xl border border-chvt-orange-500/20"></div>
        <div className="relative p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-bold text-white flex items-center">
              <span className="text-chvt-orange-500 mr-2">💻</span>
              Редактор кода
            </h3>
            <div className="flex space-x-3">
              <button
                onClick={resetCode}
                className="bg-chvt-black-900 text-gray-300 px-4 py-2 rounded text-sm border border-chvt-orange-500/20 hover:border-chvt-orange-500/40 transition-colors"
              >
                🔄 Сбросить
              </button>
              <button
                onClick={showSolution}
                className="bg-red-600 text-white px-4 py-2 rounded text-sm hover:bg-red-700 transition-colors"
              >
                👁️ Показать решение
              </button>
            </div>
          </div>

          <div className="bg-chvt-black-900 rounded-lg border border-chvt-orange-500/20 overflow-hidden">
            <div className="bg-chvt-black-800 px-4 py-2 border-b border-chvt-orange-500/20">
              <span className="text-gray-400 text-sm font-mono">
                module.bsl
              </span>
            </div>
            <textarea
              value={code}
              onChange={(e) => handleCodeChange(e.target.value)}
              className="w-full h-96 p-4 bg-transparent text-green-400 font-mono text-sm resize-none focus:outline-none"
              placeholder="Введите код здесь..."
              spellCheck={false}
            />
          </div>

          {/* Hints */}
          <div className="mt-4 p-4 bg-chvt-black-900/50 rounded-lg border border-yellow-500/20">
            <h4 className="text-yellow-400 font-semibold mb-2">
              💡 Подсказки:
            </h4>
            <ul className="space-y-1 text-sm">
              {step.hints.map((hint, index) => (
                <li key={index} className="text-yellow-300">
                  <span className="font-medium">Подсказка {index + 1}:</span>{" "}
                  {hint}
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
}
