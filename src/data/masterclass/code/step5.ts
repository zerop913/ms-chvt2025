export const step5Code = {
  title: "Получение конкретного товара",
  description:
    "Реализуйте функцию получения товара по ID с полной валидацией и обработкой ошибок.",

  codeWithGaps: `Функция ПолучитьТовар(Запрос)
    
    Попытка
        ПараметрыURL = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыURL.Получить("___BLANK_1___");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_product");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Валидация GUID
        ___BLANK_2___
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        ___BLANK_3___
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Некорректный формат идентификатора товара");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &ИдентификаторТовара
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        ЗапросТовара.УстановитьПараметр("ИдентификаторТовара", ___BLANK_4___);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(___BLANK_5___); // Не найдено
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Товар не найден");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Строка(Выборка.Артикул));
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  completeCode: `Функция ПолучитьТовар(Запрос)
    
    Попытка
        ПараметрыURL = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыURL.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_product");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Валидация GUID
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Некорректный формат идентификатора товара");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &ИдентификаторТовара
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        ЗапросТовара.УстановитьПараметр("ИдентификаторТовара", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404); // Не найдено
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Товар не найден");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроки();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Строка(Выборка.Артикул));
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  blanks: [
    {
      id: "BLANK_1",
      options: ["id_category", "product_id", "id_product", "товар"],
      correctAnswer: "id_product",
      hint: "Имя параметра для идентификатора товара",
    },
    {
      id: "BLANK_2",
      options: ["Если", "Пока", "Попытка", "Для"],
      correctAnswer: "Попытка",
      hint: "Начало блока обработки исключений",
    },
    {
      id: "BLANK_3",
      options: ["КонецЕсли", "КонецПопытки", "Исключение", "Иначе"],
      correctAnswer: "Исключение",
      hint: "Блок обработки исключения в Попытка/Исключение",
    },
    {
      id: "BLANK_4",
      options: ["ИдентификаторТовара", "Товар", "СсылкаТовара", "Ссылка"],
      correctAnswer: "СсылкаТовара",
      hint: "Переменная со ссылкой на товар",
    },
    {
      id: "BLANK_5",
      options: ["400", "500", "404", "401"],
      correctAnswer: "404",
      hint: "HTTP статус для не найденного ресурса",
    },
  ],

  theory: [
    "Валидация GUID для идентификаторов",
    "Комплексная обработка ошибок",
    "Код 404 для не найденных ресурсов",
    "Полная структура товара с категорией",
    "Вложенные блоки Попытка/Исключение",
  ],

  hints: [
    "Параметр товара: id_product",
    "Проверка формата GUID через Попытка/Исключение",
    "Код 404 для не найденных товаров",
    "Полная структура товара включает категорию",
    "Валидация параметров перед запросом к базе",
  ],
};
