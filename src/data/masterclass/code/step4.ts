export const step4Code = {
  title: "Связанные данные и вложенные структуры",
  description:
    "Создайте функцию получения всех товаров с информацией о категориях. Изучите работу со связанными данными.",

  codeWithGaps: `Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.___BLANK_1___ КАК КодКатегории,
            |   Товары.Категория.___BLANK_2___ КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Строка(Выборка.Артикул));
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            // Создаем структуру категории
            Категория = Новый ___BLANK_3___;
            Категория.___BLANK_4___("code", Выборка.КодКатегории);
            Категория.___BLANK_5___("name", Выборка.НаименованиеКатегории);
            
            Товар.___BLANK_6___("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  completeCode: `Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Строка(Выборка.Артикул));
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            // Создаем структуру категории
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  blanks: [
    {
      id: "BLANK_1",
      options: ["Наименование", "Ссылка", "Код", "ЭтоГруппа"],
      correctAnswer: "Код",
      hint: "Поле кода связанной категории",
    },
    {
      id: "BLANK_2",
      options: ["Код", "Ссылка", "Наименование", "ЭтоГруппа"],
      correctAnswer: "Наименование",
      hint: "Поле наименования связанной категории",
    },
    {
      id: "BLANK_3",
      options: ["Массив", "Соответствие", "Структура", "ТаблицаЗначений"],
      correctAnswer: "Структура",
      hint: "Тип объекта для хранения связанных данных",
    },
    {
      id: "BLANK_4",
      options: ["Добавить", "Установить", "Вставить", "Поместить"],
      correctAnswer: "Вставить",
      hint: "Метод для добавления поля в структуру",
    },
    {
      id: "BLANK_5",
      options: ["Установить", "Поместить", "Вставить", "Добавить"],
      correctAnswer: "Вставить",
      hint: "Метод для добавления поля в структуру",
    },
    {
      id: "BLANK_6",
      options: ["Добавить", "Вставить", "Установить", "Поместить"],
      correctAnswer: "Вставить",
      hint: "Метод для добавления вложенной структуры",
    },
  ],

  theory: [
    "Обращение к полям связанных объектов через точку",
    "Использование псевдонимов (КАК) для ясности",
    "Создание вложенных структур в JSON",
    "Оптимизация запросов через соединения",
  ],

  hints: [
    "Псевдонимы: Товары.Категория.Код КАК КодКатегории",
    "Создайте отдельную структуру для категории",
    "Метод Вставить для добавления вложенной структуры",
    "Поля категории: code, name",
  ],
};
