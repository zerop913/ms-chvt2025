export const step1Code = {
  title: "HTTP-сервисы и получение списка категорий",
  description:
    "Создайте функцию для получения всех категорий товаров. Заполните пропуски в коде, чтобы функция работала корректно.",

  codeWithGaps: `Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(___BLANK_1___); // Статус код для успешного ответа
        Ответ.Заголовки.Вставить("___BLANK_2___", "___BLANK_3___"); // Заголовок для JSON
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   ___BLANK_4___ // Условие для исключения групп
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("___BLANK_5___", ___BLANK_6___); // Поле code
            Категория.Вставить("___BLANK_7___", ___BLANK_8___); // Поле name
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(___BLANK_9___); // Код внутренней ошибки
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  completeCode: `Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200); // Статус код для успешного ответа
        Ответ.Заголовки.Вставить("Content-Type", "application/json"); // Заголовок для JSON
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа // Условие для исключения групп
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код); // Поле code
            Категория.Вставить("name", Выборка.Наименование); // Поле name
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500); // Код внутренней ошибки
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  blanks: [
    {
      id: "BLANK_1",
      options: ["201", "500", "200", "400"],
      correctAnswer: "200",
      hint: "Статус код для успешного HTTP ответа",
    },
    {
      id: "BLANK_2",
      options: ["Accept", "Content-Type", "Authorization", "Cache-Control"],
      correctAnswer: "Content-Type",
      hint: "Заголовок для указания типа содержимого",
    },
    {
      id: "BLANK_3",
      options: [
        "text/html",
        "application/xml",
        "application/json",
        "text/plain",
      ],
      correctAnswer: "application/json",
      hint: "MIME тип для JSON данных",
    },
    {
      id: "BLANK_4",
      options: [
        "Категории.ЭтоГруппа",
        "НЕ Категории.Активен",
        "НЕ Категории.ЭтоГруппа",
        "Категории.Активен",
      ],
      correctAnswer: "НЕ Категории.ЭтоГруппа",
      hint: "Условие для исключения групповых элементов",
    },
    {
      id: "BLANK_5",
      options: ["name", "id", "code", "category"],
      correctAnswer: "code",
      hint: "Поле для кода категории",
    },
    {
      id: "BLANK_6",
      options: [
        "Выборка.Наименование",
        "Выборка.Код",
        "Выборка.Ссылка",
        "Строка(Выборка.Код)",
      ],
      correctAnswer: "Выборка.Код",
      hint: "Значение поля кода из выборки",
    },
    {
      id: "BLANK_7",
      options: ["code", "title", "name", "description"],
      correctAnswer: "name",
      hint: "Поле для наименования категории",
    },
    {
      id: "BLANK_8",
      options: [
        "Выборка.Код",
        "Строка(Выборка.Наименование)",
        "Выборка.Наименование",
        "Выборка.Ссылка",
      ],
      correctAnswer: "Выборка.Наименование",
      hint: "Значение поля наименования из выборки",
    },
    {
      id: "BLANK_9",
      options: ["400", "404", "500", "401"],
      correctAnswer: "500",
      hint: "Статус код для внутренней ошибки сервера",
    },
  ],

  theory: [
    "HTTP-сервис в 1С возвращает объект HTTPСервисОтвет",
    "Статус 200 означает успешное выполнение запроса",
    "Заголовок Content-Type должен быть application/json для JSON ответов",
    "Блок Попытка/Исключение обрабатывает ошибки выполнения",
    "НЕ Категории.ЭтоГруппа исключает групповые элементы справочника",
  ],

  hints: [
    "Успешный HTTP статус: 200",
    "JSON заголовок: Content-Type: application/json",
    "Условие исключения групп: НЕ Категории.ЭтоГруппа",
    "Поля структуры: id, code, name",
    "Код внутренней ошибки: 500",
  ],
};
