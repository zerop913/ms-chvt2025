export const step2Code = {
  title: "Работа с параметрами URL",
  description:
    "Дополните функцию получения конкретной категории. Добавьте валидацию параметров и обработку ошибок.",

  codeWithGaps: `Функция ПолучитьКатегорию(Запрос)
    
    Попытка
        // Получаем параметры из URL
        ПараметрыURL = ___BLANK_1___;
        ИдентификаторКатегории = ПараметрыURL.Получить("id_category");
        
        // Проверяем наличие обязательного параметра
        Если ИдентификаторКатегории = ___BLANK_2___ Тогда
            Ответ = Новый HTTPСервисОтвет(___BLANK_3___); // Код для неверного запроса
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_category");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Ищем категорию по GUID
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &ИдентификаторКатегории
            |   И НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
            
        ЗапросКатегории.___BLANK_4___("ИдентификаторКатегории", ИдентификаторКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        // Проверяем найдена ли категория
        Если ___BLANK_5___ Тогда
            Ответ = Новый HTTPСервисОтвет(404); // Не найдено
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Категория не найдена");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Формируем ответ
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  completeCode: `Функция ПолучитьКатегорию(Запрос)
    
    Попытка
        // Получаем параметры из URL
        ПараметрыURL = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыURL.Получить("id_category");
        
        // Проверяем наличие обязательного параметра
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400); // Код для неверного запроса
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_category");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Ищем категорию по GUID
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &ИдентификаторКатегории
            |   И НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
            
        ЗапросКатегории.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        // Проверяем найдена ли категория
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404); // Не найдено
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Категория не найдена");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Формируем ответ
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  blanks: [
    {
      id: "BLANK_1",
      options: [
        "Запрос.Параметры",
        "URL.Параметры",
        "Запрос.ПараметрыURL",
        "ПараметрыЗапроса",
      ],
      correctAnswer: "Запрос.ПараметрыURL",
      hint: "Свойство объекта Запрос для получения параметров URL",
    },
    {
      id: "BLANK_2",
      options: ["Null", "Неопределено", "Пустая строка", "0"],
      correctAnswer: "Неопределено",
      hint: "Значение в 1С для отсутствующего параметра",
    },
    {
      id: "BLANK_3",
      options: ["404", "500", "400", "401"],
      correctAnswer: "400",
      hint: "HTTP статус для некорректного запроса клиента",
    },
    {
      id: "BLANK_4",
      options: [
        "Установить",
        "ДобавитьПараметр",
        "УстановитьПараметр",
        "Параметр",
      ],
      correctAnswer: "УстановитьПараметр",
      hint: "Метод объекта Запрос для установки параметра",
    },
    {
      id: "BLANK_5",
      options: [
        "Выборка.Следующий()",
        "Выборка = Неопределено",
        "НЕ Выборка.Следующий()",
        "НЕ Выборка",
      ],
      correctAnswer: "НЕ Выборка.Следующий()",
      hint: "Условие проверки что записи не найдены",
    },
  ],

  theory: [
    "Параметры URL доступны через Запрос.ПараметрыURL",
    "Всегда проверяйте наличие обязательных параметров",
    "Код 400 используется для некорректных запросов клиента",
    "Метод УстановитьПараметр используется для параметризованных запросов",
    "НЕ Выборка.Следующий() означает что записи не найдены",
  ],

  hints: [
    "Получение параметров: Запрос.ПараметрыURL",
    "Проверка на Неопределено для обязательных параметров",
    "Код 400 для неверных запросов",
    "УстановитьПараметр для передачи параметров в запрос",
    "НЕ Выборка.Следующий() означает что записи не найдены",
  ],
};
