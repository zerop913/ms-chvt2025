export const completeAPICode = {
  title: "Готовый код HTTP-сервиса для работы с товарами и категориями",
  description:
    "Полный рабочий код всех функций HTTP-сервиса с обработкой ошибок и валидацией",

  code: `// Получение всех категорий
Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код);
            Категория.Вставить("name", Выборка.Наименование);
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

// Получение конкретной категории
Функция ПолучитьКатегорию(Запрос)
    
    Попытка
        ПараметрыURL = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыURL.Получить("id_category");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_category");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &ИдентификаторКатегории
            |   И НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
            
        ЗапросКатегории.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Категория не найдена");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

// Получение товаров категории
Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        ПараметрыURL = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыURL.Получить("id_category");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_category");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &ИдентификаторКатегории
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        ЗапросТоваров.УстановитьПараметр("ИдентификаторКатегории", ИдентификаторКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Строка(Выборка.Артикул));
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

// Получение всех товаров со связанными данными
Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Строка(Выборка.Артикул));
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            // Создаем структуру категории
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

// Получение конкретного товара
Функция ПолучитьТовар(Запрос)
    
    Попытка
        ПараметрыURL = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыURL.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Отсутствует обязательный параметр id_product");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        // Валидация GUID
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Некорректный формат идентификатора товара");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &ИдентификаторТовара
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
            
        ЗапросТовара.УстановитьПараметр("ИдентификаторТовара", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.Заголовки.Вставить("Content-Type", "application/json");
            
            СтруктураОшибки = Новый Структура;
            СтруктураОшибки.Вставить("error", "Товар не найден");
            
            ЗаписьJSON = Новый ЗаписьJSON;
            ЗаписьJSON.УстановитьСтроку();
            ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
            
            Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
            Возврат Ответ;
        КонецЕсли;
        
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Строка(Выборка.Артикул));
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("error", "Внутренняя ошибка сервера");
        СтруктураОшибки.Вставить("message", ОписаниеОшибки());
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, СтруктураОшибки);
        
        Ответ.УстановитьТелоИзСтроки(ЗаписьJSON.Закрыть());
        
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,

  features: [
    "Полная обработка HTTP ошибок (400, 404, 500)",
    "Валидация входных параметров",
    "Правильная работа с JSON",
    "Фильтрация активных записей без пометки удаления",
    "Работа со связанными данными",
    "Вложенные структуры для категорий",
    "Комплексная валидация GUID идентификаторов",
  ],

  endpoints: [
    "GET /categories - получение всех категорий",
    "GET /category/{id_category} - получение конкретной категории",
    "GET /category/{id_category}/products - получение товаров категории",
    "GET /products - получение всех товаров",
    "GET /product/{id_product} - получение конкретного товара",
  ],
};
