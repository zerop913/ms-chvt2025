export interface StepData {
  title: string;
  description: string;
  sections: SectionData[];
}

export interface SectionData {
  type: "stepList" | "codeBlock" | "parameterGrid" | "text";
  icon: string;
  title: string;
  description?: string;
  data: any;
}

export const httpServicesPageData = {
  title: "HTTP-сервисы в 1С",
  description:
    "Создание модуля API с 5 шаблонами URL согласно мастер-классу для работы с категориями и товарами",
  steps: [
    {
      title: "Создание HTTP-сервиса API",
      description: "Добавление нового HTTP-сервиса в раздел Общие",
      sections: [
        {
          type: "stepList" as const,
          icon: "Plus",
          title: "Переход к HTTP-сервисам",
          description: "Находим раздел в дереве конфигурации",
          data: {
            steps: [
              {
                text: "В дереве конфигурации найдите раздел ",
                highlight: "Общие",
              },
              {
                text: "Раскройте раздел Общие",
              },
              {
                text: "Найдите подраздел ",
                highlight: "HTTP-сервисы",
              },
              {
                text: "Щелкните правой кнопкой на разделе HTTP-сервисы и выберите ",
                highlight: "Добавить",
              },
            ],
          },
        },
        {
          type: "stepList" as const,
          icon: "Settings",
          title: "Настройка модуля API",
          description: "Указываем параметры согласно мастер-классу",
          data: {
            steps: [
              { text: "В поле Имя введите: ", highlight: "API" },
              { text: "В поле Корневой URL введите: ", highlight: "api" },
              { text: "Остальные настройки оставьте по умолчанию" },
            ],
          },
        },
      ],
    },
    {
      title: "Создание 5 шаблонов URL",
      description:
        "Добавим все шаблоны согласно мастер-классу с точными маршрутами",
      sections: [
        {
          type: "stepList" as const,
          icon: "Plus",
          title: "Шаблон 1: Категории",
          description: "Создаем первый шаблон для получения всех категорий",
          data: {
            steps: [
              {
                text: "Щелкните правой кнопкой на модуле ",
                highlight: "API",
              },
              { text: "Выберите ", highlight: "Добавить → Шаблон URL" },
              { text: "Имя: ", highlight: "Категории" },
              { text: "Шаблон: ", highlight: "/categories" },
            ],
          },
        },
        {
          type: "stepList" as const,
          icon: "Code",
          title: "Метод GET для Категории",
          description: "Добавляем метод для получения категорий",
          data: {
            steps: [
              {
                text: "Щелкните правой кнопкой по шаблону ",
                highlight: "Категории",
              },
              { text: "Нажмите ", highlight: "Добавить → Метод" },
              { text: "Имя: ", highlight: "GET" },
              { text: "HTTP-метод: ", highlight: "GET" },
              { text: "Обработчик: ", highlight: "ПолучитьКатегории" },
            ],
          },
        },
        {
          type: "stepList" as const,
          icon: "Plus",
          title: "Шаблон 2: IDКатегории",
          description: "Создаем шаблон для получения определенной категории",
          data: {
            steps: [
              { text: "Создайте новый шаблон URL аналогично" },
              { text: "Имя: ", highlight: "IDКатегории" },
              { text: "Шаблон: ", highlight: "/categories/{id}" },
              { text: "Добавьте метод GET" },
              {
                text: "Обработчик: ",
                highlight: "ПолучитьОпределеннуюКатегорию",
              },
            ],
          },
        },
        {
          type: "stepList" as const,
          icon: "Plus",
          title: "Шаблон 3: ТоварыКатегории",
          description: "Создаем шаблон для получения товаров категории",
          data: {
            steps: [
              { text: "Создайте третий шаблон URL" },
              { text: "Имя: ", highlight: "ТоварыКатегории" },
              { text: "Шаблон: ", highlight: "/categories/{id}/products" },
              { text: "Добавьте метод GET" },
              { text: "Обработчик: ", highlight: "ПолучитьТоварыКатегории" },
            ],
          },
        },
        {
          type: "stepList" as const,
          icon: "Plus",
          title: "Шаблон 4: ВсеТовары",
          description: "Создаем шаблон для получения всех товаров",
          data: {
            steps: [
              { text: "Создайте четвертый шаблон URL" },
              { text: "Имя: ", highlight: "ВсеТовары" },
              { text: "Шаблон: ", highlight: "/categories/products" },
              { text: "Добавьте метод GET" },
              { text: "Обработчик: ", highlight: "ПолучитьВсеТовары" },
            ],
          },
        },
        {
          type: "stepList" as const,
          icon: "Plus",
          title: "Шаблон 5: ОпределенныйТовар",
          description: "Создаем шаблон для получения конкретного товара",
          data: {
            steps: [
              { text: "Создайте пятый шаблон URL" },
              { text: "Имя: ", highlight: "ОпределенныйТовар" },
              {
                text: "Шаблон: ",
                highlight: "/categories/{id}/products/{id_product}",
              },
              { text: "Добавьте метод GET" },
              { text: "Обработчик: ", highlight: "ПолучитьОпределенныйТовар" },
            ],
          },
        },
      ],
    },
    {
      title: "Открытие модуля для программирования",
      description: "Переходим к написанию кода обработчиков",
      sections: [
        {
          type: "stepList" as const,
          icon: "Code",
          title: "Открытие модуля API",
          description: "Открываем модуль для написания кода",
          data: {
            steps: [
              {
                text: "Щелкните правой кнопкой на модуле ",
                highlight: "API",
              },
              { text: "Выберите ", highlight: "Открыть модуль" },
              { text: "Откроется редактор кода модуля" },
              { text: "Здесь нужно вставить код из мастер-класса" },
            ],
          },
        },
        {
          type: "text" as const,
          icon: "Info",
          title: "Код обработчиков",
          description:
            "В открывшемся модуле необходимо написать функции-обработчики: ПолучитьКатегории, ПолучитьОпределеннуюКатегорию, ПолучитьТоварыКатегории, ПолучитьВсеТовары, ПолучитьОпределенныйТовар. Код этих функций предоставляется в мастер-классе.",
        },
        {
          type: "codeBlock" as const,
          icon: "Code",
          title: "Пример кода обработчиков",
          description: "Код функций для HTTP-сервиса",
          data: {
            code: `
          Функция ПолучитьКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивКатегорий = Новый Массив;
        
        ЗапросКатегорий = Новый Запрос;
        ЗапросКатегорий.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   НЕ Категории.ЭтоГруппа
            |   И НЕ Категории.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросКатегорий.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Категория = Новый Структура;
            Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Категория.Вставить("code", Выборка.Код);
            Категория.Вставить("name", Выборка.Наименование);
            
            МассивКатегорий.Добавить(Категория);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивКатегорий);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределеннуюКатегорию(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросКатегории = Новый Запрос;
        ЗапросКатегории.Текст = 
            "ВЫБРАТЬ
            |   Категории.Ссылка,
            |   Категории.Код,
            |   Категории.Наименование
            |ИЗ
            |   Справочник.Категории КАК Категории
            |ГДЕ
            |   Категории.Ссылка = &Ссылка";
        
        ЗапросКатегории.УстановитьПараметр("Ссылка", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросКатегории.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Категория не найдена");
            Возврат Ответ;
        КонецЕсли;
        
        Категория = Новый Структура;
        Категория.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Категория.Вставить("code", Выборка.Код);
        Категория.Вставить("name", Выборка.Наименование);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Категория);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьТоварыКатегории(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторКатегории = ПараметрыЗапроса.Получить("id");
        
        Если ИдентификаторКатегории = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор категории");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаКатегории = Справочники.Категории.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКатегории));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора категории");
            Возврат Ответ;
        КонецПопытки;
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Категория = &Категория
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТоваров.УстановитьПараметр("Категория", СсылкаКатегории);
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьВсеТовары(Запрос)
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        МассивТоваров = Новый Массив;
        
        ЗапросТоваров = Новый Запрос;
        ЗапросТоваров.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        РезультатЗапроса = ЗапросТоваров.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Товар = Новый Структура;
            Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
            Товар.Вставить("code", Выборка.Код);
            Товар.Вставить("name", Выборка.Наименование);
            Товар.Вставить("article", Выборка.Артикул);
            Товар.Вставить("price", Выборка.Цена);
            Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
            Товар.Вставить("active", Выборка.Активен);
            
            Категория = Новый Структура;
            Категория.Вставить("code", Выборка.КодКатегории);
            Категория.Вставить("name", Выборка.НаименованиеКатегории);
            Товар.Вставить("category", Категория);
            
            МассивТоваров.Добавить(Товар);
        КонецЦикла;
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, МассивТоваров);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции

Функция ПолучитьОпределенныйТовар(Запрос) Экспорт
    
    Попытка
        Ответ = Новый HTTPСервисОтвет(200);
        Ответ.Заголовки.Вставить("Content-Type", "application/json");
        
        ПараметрыЗапроса = Запрос.ПараметрыURL;
        ИдентификаторТовара = ПараметрыЗапроса.Получить("id_product");
        
        Если ИдентификаторТовара = Неопределено Тогда
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: не указан идентификатор товара");
            Возврат Ответ;
        КонецЕсли;
        
        Попытка
            СсылкаТовара = Справочники.Товары.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТовара));
        Исключение
            Ответ = Новый HTTPСервисОтвет(400);
            Ответ.УстановитьТелоИзСтроки("Ошибка: неверный формат идентификатора товара");
            Возврат Ответ;
        КонецПопытки;
        
        ЗапросТовара = Новый Запрос;
        ЗапросТовара.Текст = 
            "ВЫБРАТЬ
            |   Товары.Ссылка,
            |   Товары.Код,
            |   Товары.Наименование,
            |   Товары.Артикул,
            |   Товары.Цена,
            |   Товары.ЕдиницаИзмерения,
            |   Товары.Активен,
            |   Товары.Категория.Код КАК КодКатегории,
            |   Товары.Категория.Наименование КАК НаименованиеКатегории
            |ИЗ
            |   Справочник.Товары КАК Товары
            |ГДЕ
            |   Товары.Ссылка = &Ссылка
            |   И Товары.Активен = Истина
            |   И НЕ Товары.ПометкаУдаления";
        
        ЗапросТовара.УстановитьПараметр("Ссылка", СсылкаТовара);
        
        РезультатЗапроса = ЗапросТовара.Выполнить();
        Выборка = РезультатЗапроса.Выбрать();
        
        Если НЕ Выборка.Следующий() Тогда
            Ответ = Новый HTTPСервисОтвет(404);
            Ответ.УстановитьТелоИзСтроки("Товар не найден");
            Возврат Ответ;
        КонецЕсли;
        
        Товар = Новый Структура;
        Товар.Вставить("id", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
        Товар.Вставить("code", Выборка.Код);
        Товар.Вставить("name", Выборка.Наименование);
        Товар.Вставить("article", Выборка.Артикул);
        Товар.Вставить("price", Выборка.Цена);
        Товар.Вставить("unit", Строка(Выборка.ЕдиницаИзмерения));
        Товар.Вставить("active", Выборка.Активен);
        
        Категория = Новый Структура;
        Категория.Вставить("code", Выборка.КодКатегории);
        Категория.Вставить("name", Выборка.НаименованиеКатегории);
        Товар.Вставить("category", Категория);
        
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку();
        ЗаписатьJSON(ЗаписьJSON, Товар);
        СтрокаJSON = ЗаписьJSON.Закрыть();
        
        Ответ.УстановитьТелоИзСтроки(СтрокаJSON);
        
        Возврат Ответ;
        
    Исключение
        Ответ = Новый HTTPСервисОтвет(500);
        Ответ.УстановитьТелоИзСтроки("Внутренняя ошибка сервера: " + ОписаниеОшибки());
        Возврат Ответ;
    КонецПопытки;
    
КонецФункции`,
          },
        },
      ],
    },
    {
      title: "Создание пользователя admin",
      description: "Создаем пользователя для работы с API",
      sections: [
        {
          type: "stepList" as const,
          icon: "User",
          title: "Переход к администрированию",
          description: "Создаем пользователя согласно мастер-классу",
          data: {
            steps: [
              {
                text: "В верхней панели нажмите ",
                highlight: "Администрирование",
              },
              { text: "Выберите ", highlight: "Пользователи" },
              { text: "Добавьте нового пользователя" },
              { text: "Имя пользователя: ", highlight: "admin" },
              { text: "Пароль: ", highlight: "root" },
              { text: "Назначьте роль Администратор" },
            ],
          },
        },
      ],
    },
    {
      title: "Запуск и проверка",
      description: "Тестируем созданные HTTP-сервисы",
      sections: [
        {
          type: "stepList" as const,
          icon: "Play",
          title: "Запуск базы",
          description: "Переходим в режим Предприятие для тестирования",
          data: {
            steps: [
              {
                text: "Нажмите Ctrl+F5 или используйте верхнюю панель ",
                highlight: "Сервис → 1С:Предприятие",
              },
              { text: "Согласитесь с изменениями конфигурации" },
              { text: "Введите пароль, если потребуется: ", highlight: "root" },
              { text: "База должна успешно запуститься" },
            ],
          },
        },
        {
          type: "text" as const,
          icon: "CheckCircle",
          title: "Готовность к следующему этапу",
          description:
            "HTTP-сервисы созданы и готовы к работе. После настройки Apache и публикации сервисов, API будет доступно по адресам вида: http://localhost:80/chvt2025/hs/api/categories/",
        },
      ],
    },
  ],
  navigation: {
    prev: {
      href: "/docs/configuration/roles",
      title: "Создание ролей",
    },
    next: {
      href: "/docs/apache-setup/installation",
      title: "Установка Apache",
    },
  },
  highlight: {
    title: "HTTP-сервисы готовы!",
    description:
      "Модуль API с 5 шаблонами URL создан согласно мастер-классу. Все обработчики настроены, пользователь admin создан. Можно переходить к установке Apache.",
    tags: ["1С", "HTTP-сервисы", "API", "REST", "Обработчики"],
  },
};
